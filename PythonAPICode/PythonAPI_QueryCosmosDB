{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "collapsed": true,
        "execution": {
          "iopub.execute_input": "2020-10-20T12:24:02.260Z",
          "iopub.status.busy": "2020-10-20T12:24:02.195Z",
          "iopub.status.idle": "2020-10-20T12:24:02.373Z",
          "shell.execute_reply": "2020-10-20T12:24:02.382Z"
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "trusted": false
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "{'id': 'Metadatabase', '_rid': 'gJFKAA==', '_self': 'dbs/gJFKAA==/', '_etag': '\"0000eb0e-0000-0100-0000-5f8ddbc00000\"', '_colls': 'colls/', '_users': 'users/', '_ts': 1603132352}\nFactDimMetadadata\n[{'TableID': '1', 'TableName': 'DimPolicy', 'PK': 'Policykey', 'Columns': ['Brokerkey', 'insuredKey', 'EffectiveDate', 'ExpiryDate']}]\nQuery returned 1 items. Operation consumed 2.83 request units\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1 entries, 0 to 0\nData columns (total 4 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   TableID    1 non-null      object\n 1   TableName  1 non-null      object\n 2   PK         1 non-null      object\n 3   Columns    1 non-null      object\ndtypes: object(4)\nmemory usage: 160.0+ bytes\n"
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>TableID</th>\n      <th>TableName</th>\n      <th>PK</th>\n      <th>Columns</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>DimPolicy</td>\n      <td>Policykey</td>\n      <td>[Brokerkey, insuredKey, EffectiveDate, ExpiryD...</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "   TableID  TableName         PK  \\\n0        1  DimPolicy  Policykey   \n\n                                             Columns  \n0  [Brokerkey, insuredKey, EffectiveDate, ExpiryD...  "
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "import numpy as np\r\nimport pandas as pd\r\nimport azure.cosmos.cosmos_client as cc\r\nimport azure.cosmos.exceptions as exceptions\r\nfrom azure.cosmos.partition_key import PartitionKey\r\nimport datetime\r\n\r\nendpoint= 'https://azcosmosdbde.documents.azure.com:443/'\r\nkey= 'KBGNrHSSIjQ7xKHrZI3x6bvmUYVV7piXdkTxalO0Ho7DtSg3Hx0PpTuBt5MQ3WYMwheSggDx5iS4Q8GrAwgW7Q=='\r\n\r\nclient = cc.CosmosClient(endpoint, key)\r\n\r\n\r\n#database_name = 'AzureSampleFamilyDatabase'\r\n#database = client.create_database_if_not_exists(id=database_name)\r\n\r\n\r\n#container_name = 'FamilyContainer'\r\n#container = database.create_container_if_not_exists(\r\n#    id=container_name, \r\n#    partition_key=PartitionKey(path=\"/lastName\"),\r\n#    offer_throughput=400\r\n#)\r\n\r\n#for family_item in family_items_to_create:\r\n#    container.create_item(body=family_item)\r\n\r\n#get the charge of last request\r\n#for family in family_items_to_create:\r\n#    item_response = container.read_item(item=family['id'], partition_key=family['lastName'])\r\n#    request_charge = container.client_connection.last_response_headers['x-ms-request-charge']\r\n#    print('Read item with id {0}. Operation consumed {1} request units'.format(item_response['id'], (request_charge)))\r\n\r\nfor d in client.list_databases():\r\n    print(d)\r\n\r\n#choose DB from above list\r\ndatabase_name = 'Metadatabase'\r\ndb= client.get_database_client(database_name)\r\n\r\nfor c in db.list_containers():\r\n    print(c['id'])\r\n#Returns Dictionary\r\n#choose containers\r\n\r\ncontainer_name = 'FactDimMetadadata'\r\ncont= db.get_container_client(container_name)\r\n\r\n\r\n#container.create_item\r\n#container.read_item\r\n#container.query_items\r\n\r\n\r\n    # enable_cross_partition_query should be set to True as the container is partitioned\r\n\r\ndoc_id_tablename= 'DimPolicy'\r\n#SELECT  FROM r WHERE r.TableName = 'DimPolicy'\r\n#Way:1\r\n#SELECT r.TableID,r.TableName, r.PK, r[\"Columns\"] FROM r WHERE r.TableName = 'DimPolicy'\r\n#when keywords are used\r\n#Way 2:\r\n#SELECT VALUE{TableID: r.TableID,TableName: r.TableName,PK: r.PK,Columns: r.Columns} FROM r WHERE r.TableName = 'DimPolicy'\r\n\r\nquery= 'SELECT VALUE{TableID: r.TableID,TableName: r.TableName,PK: r.PK,Columns: r.Columns} FROM r WHERE r.TableName = @tablename'\r\n\r\nitems = list(cont.query_items(query=query,parameters=[{ \"name\":\"@tablename\", \"value\": doc_id_tablename }], enable_cross_partition_query=True))\r\n#items = list(cont.query_items(query=query, enable_cross_partition_query=True))\r\n\r\n\r\nprint(items)\r\nrequest_charge = cont.client_connection.last_response_headers['x-ms-request-charge']\r\nprint('Query returned {0} items. Operation consumed {1} request units'.format(len(items), request_charge))\r\n\r\n\r\n\r\n#you can create data frames directly using Json objects\r\ndf= pd.DataFrame(items)\r\n\r\n#container_name = 'factDimMetadata'\r\n#container= db.\r\n#uery = \"SELECT * FROM c WHERE c.lastName IN ('Wakefield', 'Andersen')\"\r\n\r\n#items = list(container.query_items(\r\n#    query=query,\r\n#    enable_cross_partition_query=True\r\n#))\r\n\r\ndf.info()\r\ndf.describe()\r\n\r\ndf= df.astype({'TableID':'int', 'TableName':'category'})\r\n\r\ndf.dtypes\r\ndf\r\n\r\n\r\n"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "trusted": false
      },
      "outputs": [],
      "source": ""
    }
  ],
  "metadata": {
    "language_info": {
      "file_extension": "ipynb",
      "mimetype": "application/json",
      "name": "python",
      "version": "3.7"
    },
    "nteract": {
      "version": "dataExplorer 1.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}